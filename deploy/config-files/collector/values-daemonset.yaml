mode: daemonset

presets:
  kubeletMetrics:
    enabled: true
  kubernetesAttributes:
    enabled: true
    extractAllPodLabels: true
    extractAllPodAnnotations: true
image:
  repository: "ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib"

service:
  enabled: true

config:
  receivers:
    jaeger: null
    zipkin: null
    kubeletstats:
      insecure_skip_verify: true
      collection_interval: 30s
      metric_groups:
        - node
        - pod
      metrics:
        k8s.node.uptime:
          enabled: true
        k8s.pod.uptime:
          enabled: true
        k8s.pod.cpu_limit_utilization:
          enabled: true
        k8s.pod.cpu_request_utilization:
          enabled: true
        k8s.pod.memory_limit_utilization:
          enabled: true
        k8s.pod.memory_request_utilization:
          enabled: true
    otlp:
      protocols:
        grpc:
        http:
          cors:
            allowed_origins:
              - http://*
              - https://*
          endpoint: 0.0.0.0:4318
  processors:
    transform/service_names:
      error_mode: ignore
      log_statements:
        - context: resource
          statements:
            - set(attributes["service.name"], "api-gateway") where attributes["service.name"] == "frontend"
            - set(attributes["service.name"], "ingress-gateway") where attributes["service.name"] == "frontendproxy"
      metric_statements:
        - context: resource
          statements:
            - set(attributes["service.name"], "api-gateway") where attributes["service.name"] == "frontend"
            - set(attributes["service.name"], "ingress-gateway") where attributes["service.name"] == "frontendproxy"
      trace_statements:
        - context: resource
          statements:
            - set(attributes["service.name"], "api-gateway") where attributes["service.name"] == "frontend"
            - set(attributes["service.name"], "ingress-gateway") where attributes["service.name"] == "frontendproxy"
  exporters:
    otlp/traces:
      endpoint: api.honeycomb.io:443
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY}

    otlp/metrics:
      endpoint: api.honeycomb.io:443
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY}
        x-honeycomb-dataset: service-metrics

    otlp/logging:
      endpoint: api.honeycomb.io:443
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY}
        x-honeycomb-dataset: service-logs

    otlp/traces-dogfood:
      endpoint: api-dogfood.honeycomb.io:443
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY_DOGFOOD}

    otlp/metrics-dogfood:
      endpoint: api-dogfood.honeycomb.io:443
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY_DOGFOOD}
        x-honeycomb-dataset: service-metrics

    otlp/logging-dogfood:
      endpoint: api-dogfood.honeycomb.io:443
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY_DOGFOOD}
        x-honeycomb-dataset: service-logs

    debug:
      verbosity: detailed

  service:
    pipelines:
      metrics:
        exporters: 
          - otlp/metrics
          - otlp/metrics-dogfood
        processors:
          - transform/service_names
      logs:
        exporters: 
          - otlp/logging
          - otlp/logging-dogfood
        processors:
          - transform/service_names
      traces:
        exporters: 
          - otlp/traces
          - otlp/traces-dogfood
        processors:
          - transform/service_names
          
clusterRole:
  create: true
  rules:
    - apiGroups: 
        - ""
      resources:
        - nodes/proxy
      verbs:
        - get